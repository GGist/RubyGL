var search_data = {"index":{"searchIndex":["object","rubygl","complexshape","conversion","math","defaultsetup","indexarray","inputcallback","mat4","native","eventtype","point","shader","shadergenerator","simpleshape","util","vec3","vec4","vertexarray","*()","+()","+()","+()","-()","-()","-()","[]()","[]()","[]()","[]=()","[]=()","[]=()","attrib_location()","color_shader()","cross()","deg_to_rad()","dim()","distance()","draw()","draw()","draw_instanced()","end_frame()","faceted_shader()","gen_diamond()","gen_index_arrays()","gen_sphere()","gen_vertex_normals()","len()","len()","midpoint()","new()","new()","new()","new()","new()","new()","new()","new()","norm()","norm()","norm!()","norm!()","orthogonal()","os()","overflow_wrap()","perspective()","phong_shader()","rad_to_deg()","register()","relative_path()","release()","release()","rotation()","scale()","send_uniform()","show_dialog()","teardown()","to_a()","to_a()","to_a()","to_a()","to_ary()","to_ary()","to_ary()","to_ary()","translation()","use_program()","vertex_attrib_div()","vertex_attrib_ptr()"],"longSearchIndex":["object","rubygl","rubygl::complexshape","rubygl::conversion","rubygl::conversion::math","rubygl::defaultsetup","rubygl::indexarray","rubygl::inputcallback","rubygl::mat4","rubygl::native","rubygl::native::eventtype","rubygl::point","rubygl::shader","rubygl::shadergenerator","rubygl::simpleshape","rubygl::util","rubygl::vec3","rubygl::vec4","rubygl::vertexarray","rubygl::mat4#*()","rubygl::point#+()","rubygl::vec3#+()","rubygl::vec4#+()","rubygl::point#-()","rubygl::vec3#-()","rubygl::vec4#-()","rubygl::mat4#[]()","rubygl::vec3#[]()","rubygl::vec4#[]()","rubygl::mat4#[]=()","rubygl::vec3#[]=()","rubygl::vec4#[]=()","rubygl::shader#attrib_location()","rubygl::shadergenerator::color_shader()","rubygl::vec3#cross()","rubygl::conversion::deg_to_rad()","rubygl::mat4#dim()","rubygl::point#distance()","rubygl::indexarray#draw()","rubygl::vertexarray#draw()","rubygl::vertexarray#draw_instanced()","rubygl::defaultsetup#end_frame()","rubygl::shadergenerator::faceted_shader()","rubygl::complexshape::gen_diamond()","rubygl::util::gen_index_arrays()","rubygl::complexshape::gen_sphere()","rubygl::util::gen_vertex_normals()","rubygl::vec3#len()","rubygl::vec4#len()","rubygl::point#midpoint()","rubygl::defaultsetup::new()","rubygl::indexarray::new()","rubygl::mat4::new()","rubygl::point::new()","rubygl::shader::new()","rubygl::vec3::new()","rubygl::vec4::new()","rubygl::vertexarray::new()","rubygl::vec3#norm()","rubygl::vec4#norm()","rubygl::vec3#norm!()","rubygl::vec4#norm!()","rubygl::mat4::orthogonal()","object#os()","rubygl::util::overflow_wrap()","rubygl::mat4::perspective()","rubygl::shadergenerator::phong_shader()","rubygl::conversion::rad_to_deg()","rubygl::inputcallback::register()","object#relative_path()","rubygl::indexarray#release()","rubygl::vertexarray#release()","rubygl::mat4::rotation()","rubygl::point#scale()","rubygl::shader#send_uniform()","rubygl::defaultsetup#show_dialog()","rubygl::defaultsetup#teardown()","rubygl::mat4#to_a()","rubygl::point#to_a()","rubygl::vec3#to_a()","rubygl::vec4#to_a()","rubygl::mat4#to_ary()","rubygl::point#to_ary()","rubygl::vec3#to_ary()","rubygl::vec4#to_ary()","rubygl::mat4::translation()","rubygl::shader#use_program()","rubygl::vertexarray#vertex_attrib_div()","rubygl::vertexarray#vertex_attrib_ptr()"],"info":[["Object","","Object.html","",""],["RubyGL","","RubyGL.html","","<p>Initialize All Modules\n"],["RubyGL::ComplexShape","","RubyGL/ComplexShape.html","","<p>Class For Generating 3-D Shapes\n"],["RubyGL::Conversion","","RubyGL/Conversion.html","",""],["RubyGL::Conversion::Math","","RubyGL/Conversion/Math.html","",""],["RubyGL::DefaultSetup","","RubyGL/DefaultSetup.html","",""],["RubyGL::IndexArray","","RubyGL/IndexArray.html","",""],["RubyGL::InputCallback","","RubyGL/InputCallback.html","",""],["RubyGL::Mat4","","RubyGL/Mat4.html","","<p>Stored In Column Order For Interoperability With OpenGL. Subscript Operator\nWill Return A Vector That …\n"],["RubyGL::Native","","RubyGL/Native.html","",""],["RubyGL::Native::EventType","","RubyGL/Native/EventType.html","",""],["RubyGL::Point","","RubyGL/Point.html","","<p>All Point Operations Return New Points\n"],["RubyGL::Shader","","RubyGL/Shader.html","",""],["RubyGL::ShaderGenerator","","RubyGL/ShaderGenerator.html","",""],["RubyGL::SimpleShape","","RubyGL/SimpleShape.html","","<p>Class For Generating 2-D Shapes\n"],["RubyGL::Util","","RubyGL/Util.html","",""],["RubyGL::Vec3","","RubyGL/Vec3.html","",""],["RubyGL::Vec4","","RubyGL/Vec4.html","",""],["RubyGL::VertexArray","","RubyGL/VertexArray.html","",""],["*","RubyGL::Mat4","RubyGL/Mat4.html#method-i-2A","(other_matrix)",""],["+","RubyGL::Point","RubyGL/Point.html#method-i-2B","(point)",""],["+","RubyGL::Vec3","RubyGL/Vec3.html#method-i-2B","(other_vector)",""],["+","RubyGL::Vec4","RubyGL/Vec4.html#method-i-2B","(other_vector)",""],["-","RubyGL::Point","RubyGL/Point.html#method-i-2D","(point)",""],["-","RubyGL::Vec3","RubyGL/Vec3.html#method-i-2D","(other_vector)",""],["-","RubyGL::Vec4","RubyGL/Vec4.html#method-i-2D","(other_vector)",""],["[]","RubyGL::Mat4","RubyGL/Mat4.html#method-i-5B-5D","(index)",""],["[]","RubyGL::Vec3","RubyGL/Vec3.html#method-i-5B-5D","(index)",""],["[]","RubyGL::Vec4","RubyGL/Vec4.html#method-i-5B-5D","(index)",""],["[]=","RubyGL::Mat4","RubyGL/Mat4.html#method-i-5B-5D-3D","(index, value)",""],["[]=","RubyGL::Vec3","RubyGL/Vec3.html#method-i-5B-5D-3D","(index, value)",""],["[]=","RubyGL::Vec4","RubyGL/Vec4.html#method-i-5B-5D-3D","(index, value)",""],["attrib_location","RubyGL::Shader","RubyGL/Shader.html#method-i-attrib_location","(var_name)",""],["color_shader","RubyGL::ShaderGenerator","RubyGL/ShaderGenerator.html#method-c-color_shader","()",""],["cross","RubyGL::Vec3","RubyGL/Vec3.html#method-i-cross","(other_vector)",""],["deg_to_rad","RubyGL::Conversion","RubyGL/Conversion.html#method-c-deg_to_rad","(degrees)",""],["dim","RubyGL::Mat4","RubyGL/Mat4.html#method-i-dim","()",""],["distance","RubyGL::Point","RubyGL/Point.html#method-i-distance","(point)",""],["draw","RubyGL::IndexArray","RubyGL/IndexArray.html#method-i-draw","(components)",""],["draw","RubyGL::VertexArray","RubyGL/VertexArray.html#method-i-draw","(components)",""],["draw_instanced","RubyGL::VertexArray","RubyGL/VertexArray.html#method-i-draw_instanced","(components, iterations)",""],["end_frame","RubyGL::DefaultSetup","RubyGL/DefaultSetup.html#method-i-end_frame","()",""],["faceted_shader","RubyGL::ShaderGenerator","RubyGL/ShaderGenerator.html#method-c-faceted_shader","()",""],["gen_diamond","RubyGL::ComplexShape","RubyGL/ComplexShape.html#method-c-gen_diamond","(diamond_height, girdle_radius, girdle_facets)","<p>Generates an array of 3 component vertices in counter-clockwise triangle\nconfiguration. This is the vertex …\n"],["gen_index_arrays","RubyGL::Util","RubyGL/Util.html#method-c-gen_index_arrays","(vertex_array, components)","<p>Returns [vertices, indices] where vertices is an array of unique vertices\ncorresponding to the vertices …\n"],["gen_sphere","RubyGL::ComplexShape","RubyGL/ComplexShape.html#method-c-gen_sphere","(radius, num_rings)","<p>Generates an array of 3 component vertices in counter-clockwise triangle\nconfiguration. This is the vertex …\n"],["gen_vertex_normals","RubyGL::Util","RubyGL/Util.html#method-c-gen_vertex_normals","(indices, vertices)","<p>Returns an array of vertex normals which is indexable by the indices array.\nThe components parameter …\n"],["len","RubyGL::Vec3","RubyGL/Vec3.html#method-i-len","()",""],["len","RubyGL::Vec4","RubyGL/Vec4.html#method-i-len","()",""],["midpoint","RubyGL::Point","RubyGL/Point.html#method-i-midpoint","(point)",""],["new","RubyGL::DefaultSetup","RubyGL/DefaultSetup.html#method-c-new","(args = {})","<p>The args hash accepts position and size values to be applied to the window.\n:x, :y, :width, :height\n"],["new","RubyGL::IndexArray","RubyGL/IndexArray.html#method-c-new","(index_array)",""],["new","RubyGL::Mat4","RubyGL/Mat4.html#method-c-new","(diagonal = 1.0)",""],["new","RubyGL::Point","RubyGL/Point.html#method-c-new","(x, y, z = 0)",""],["new","RubyGL::Shader","RubyGL/Shader.html#method-c-new","(vert_src, frag_src)",""],["new","RubyGL::Vec3","RubyGL/Vec3.html#method-c-new","(array = nil)",""],["new","RubyGL::Vec4","RubyGL/Vec4.html#method-c-new","()",""],["new","RubyGL::VertexArray","RubyGL/VertexArray.html#method-c-new","(vertex_array)","<p>Allocates a GPU buffer for vertex_array and transfers the data as a vertex\nattribute array. This allows …\n"],["norm","RubyGL::Vec3","RubyGL/Vec3.html#method-i-norm","()",""],["norm","RubyGL::Vec4","RubyGL/Vec4.html#method-i-norm","()",""],["norm!","RubyGL::Vec3","RubyGL/Vec3.html#method-i-norm-21","()",""],["norm!","RubyGL::Vec4","RubyGL/Vec4.html#method-i-norm-21","()",""],["orthogonal","RubyGL::Mat4","RubyGL/Mat4.html#method-c-orthogonal","(left, right, bottom, top, z_near = -1.0, z_far = 1.0)",""],["os","Object","Object.html#method-i-os","()","<p>OS Detection\n"],["overflow_wrap","RubyGL::Util","RubyGL/Util.html#method-c-overflow_wrap","(array, index)","<p>Returns the value of the array at the overflow wrapped index value.\n"],["perspective","RubyGL::Mat4","RubyGL/Mat4.html#method-c-perspective","(fov, aspect, z_near, z_far)",""],["phong_shader","RubyGL::ShaderGenerator","RubyGL/ShaderGenerator.html#method-c-phong_shader","()",""],["rad_to_deg","RubyGL::Conversion","RubyGL/Conversion.html#method-c-rad_to_deg","(radians)",""],["register","RubyGL::InputCallback","RubyGL/InputCallback.html#method-c-register","()",""],["relative_path","Object","Object.html#method-i-relative_path","(resource_path)",""],["release","RubyGL::IndexArray","RubyGL/IndexArray.html#method-i-release","()","<p>This frees the currently allocated GPU buffer for this IndexArray and\ninvalidates this IndexArray object. …\n"],["release","RubyGL::VertexArray","RubyGL/VertexArray.html#method-i-release","()","<p>This frees the currently allocated GPU buffer for this VertexArray and\ninvalidates this VertexArray object. …\n"],["rotation","RubyGL::Mat4","RubyGL/Mat4.html#method-c-rotation","(x_axis, y_axis, z_axis, theta)","<p>The axis value should be 0 if that axis should not be rotated around; any\nother value indicates its priority …\n"],["scale","RubyGL::Point","RubyGL/Point.html#method-i-scale","(value)",""],["send_uniform","RubyGL::Shader","RubyGL/Shader.html#method-i-send_uniform","(method_sym, var_name, data = nil, *args)","<p>Splat Operator Aggregates Incoming Parameters And Expands Outgoing\nParameters If method_sym Does Not …\n"],["show_dialog","RubyGL::DefaultSetup","RubyGL/DefaultSetup.html#method-i-show_dialog","(title, message)",""],["teardown","RubyGL::DefaultSetup","RubyGL/DefaultSetup.html#method-i-teardown","()",""],["to_a","RubyGL::Mat4","RubyGL/Mat4.html#method-i-to_a","()",""],["to_a","RubyGL::Point","RubyGL/Point.html#method-i-to_a","()",""],["to_a","RubyGL::Vec3","RubyGL/Vec3.html#method-i-to_a","()",""],["to_a","RubyGL::Vec4","RubyGL/Vec4.html#method-i-to_a","()",""],["to_ary","RubyGL::Mat4","RubyGL/Mat4.html#method-i-to_ary","()",""],["to_ary","RubyGL::Point","RubyGL/Point.html#method-i-to_ary","()",""],["to_ary","RubyGL::Vec3","RubyGL/Vec3.html#method-i-to_ary","()",""],["to_ary","RubyGL::Vec4","RubyGL/Vec4.html#method-i-to_ary","()",""],["translation","RubyGL::Mat4","RubyGL/Mat4.html#method-c-translation","(x, y, z)",""],["use_program","RubyGL::Shader","RubyGL/Shader.html#method-i-use_program","()",""],["vertex_attrib_div","RubyGL::VertexArray","RubyGL/VertexArray.html#method-i-vertex_attrib_div","(location, instances_per_change)",""],["vertex_attrib_ptr","RubyGL::VertexArray","RubyGL/VertexArray.html#method-i-vertex_attrib_ptr","(location, components)","<p>Binds the VertexArray to the attribute at location within a shader.\n"]]}}